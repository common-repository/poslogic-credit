<?php
/* Poslogic Credit Payment Gateway Class */
class Poslogic_Credit_Gateway extends WC_Payment_Gateway{
    CONST TABLE_POSTFIX = "poslogic_credit_categories";
    CONST DEMO_AUTH_URL = 'https://auth-dev.poslogic.pro/oauth';
    CONST PROD_AUTH_URL = 'https://auth.poslogic.pro/oauth';
    CONST DEMO_API_URL = 'https://posline-demo.poslogic.pro/api/v1';
    CONST PROD_API_URL = 'https://online.poslogic.pro/api/v1';

    private $table_name = "";
    private $token = null;
    private $wpdb = null;

    public function __construct()
    {
        global $wpdb;
        $this->wpdb = $wpdb;
        $this->table_name = $this->wpdb->prefix . self::TABLE_POSTFIX;

        $this->plugin_name = plugin_basename(__FILE__);
        $this->id = "poslogic_credit";
        $this->plugin_section = WC()->version >= "3.0.0" ? "poslogic_credit" : "poslogic_credit_gateway";

        $this->method_title = __("Poslogic Credit", 'poslogic-credit');

        $this->method_description = __("Poslogic Credit Gateway Plug-in for WooCommerce", 'poslogic-credit');

        $this->title = __("Poslogic Credit", 'poslogic-credit');

        $this->icon = null;

        $this->has_fields = true;

        $this->init_form_fields();

        $this->init_settings();

        foreach ($this->settings as $setting_key => $value) {
            $this->$setting_key = $value;
        }

        // Lets check for SSL
        //add_action('admin_notices', array($this, 'do_ssl_check'));

        if (is_admin()) {
            add_action('woocommerce_update_options_payment_gateways_' . $this->id, array($this, 'process_admin_options'));
        }
    }

    public function process_admin_options(){
        $screen = isset($_GET['screen']) ? sanitize_text_field($_GET['screen']) : "";
        if($screen === 'category_setup'){
            $this->saveCategorySetup();
        }else{
            parent::process_admin_options();
        }
    }

    private function getCategoryMapping(){
        $result = $this->wpdb->get_results("SELECT wp_product_category_id, poslogic_product_category_id FROM ".$this->table_name);
        $wc_poslogic_categories = array();
        foreach($result as $row){
            $wc_poslogic_categories[$row->wp_product_category_id] = $row->poslogic_product_category_id;
        }

        return $wc_poslogic_categories;
    }

    public function admin_options(){
        $screen = isset($_GET['screen']) ? sanitize_text_field($_GET['screen']) : "";

        $error_message = "";
        if($screen === 'category_setup'){
            try{
                $poslogic_categories = $this->getPoslogicCategories();
            } catch (Exception $e){
                $error_message = $e->getMessage();
            }
            $wc_categories = get_terms( array('taxonomy' => 'product_cat', 'hide_empty' => false) );
            $wc_poslogic_categories = $this->getCategoryMapping();
            $return_href = admin_url( 'admin.php?page=wc-settings&tab=checkout&section='.$this->plugin_section );

            require_once plugin_dir_path(__FILE__)."templates/category_setup.php";
        }else{
            parent::admin_options(); // TODO: Change the autogenerated stub
        }
    }

    public function init_form_fields(){
        $attribute_taxonomies = wc_get_attribute_taxonomies();
        $pa_args = array(
                0 => site_url(),
        );
        if ( 0 !== count( $attribute_taxonomies ) ) {
            foreach ( $attribute_taxonomies as $one_tax ) {
                $pa_args[$one_tax->attribute_name] = $one_tax->attribute_label;
            }
        }

        $this->form_fields = array(
            'enabled' => array(
                'title' => __('Enable / Disable', 'poslogic-credit'),
                'label' => __('Make Poslogic Credit available for payment', 'poslogic-credit'),
                'type' => 'checkbox',
                'default' => 'no',
            ),
            'title' => array(
                'title' => __('Title', 'poslogic-credit'),
                'type' => 'text',
                'desc_tip' => __('Text on the Buy Button', 'poslogic-credit'),
                'default' => __('Online Credit', 'poslogic-credit'),
            ),
            'description' => array(
                'title' => __('Description', 'poslogic-credit'),
                'type' => 'textarea',
                'desc_tip' => __('Description about Buy Button (if available)', 'poslogic-credit'),
                'default' => __('Buy goods on loan', 'poslogic-credit'),
                'css' => 'max-width:350px;'
            ),
            'client_id' => array(
                'title' => __('Poslogic Client ID', 'poslogic-credit'),
                'type' => 'text',
                'desc_tip' => __('Your Client ID setting', 'poslogic-credit'),
            ),
            'client_secret' => array(
                'title' => __('Poslogic Client Secret Key', 'poslogic-credit'),
                'type' => 'password',
                'desc_tip' => __('Your Client Secret setting', 'poslogic-credit'),
            ),
            'installment' => array(
                'title' => __('Installment', 'poslogic-credit'),
                'type' => 'select',
                'options' => array(
                        0 => __('No', 'poslogic-credit'),
                        1 => __('Yes', 'poslogic-credit')
                )
            ),
            'manufacturer_field_name' => array(
                'title' => __('Name of Manufacturer field', 'poslogic-credit'),
                'type' => 'select',
                'desc_tip' => __('Set the name of the product attribute in which you indicate the manufacturer. You can specify here the name of your site, but it may affect the approval rating of banks.', 'poslogic-credit'),
                'options'   => $pa_args,
            ),
            'category_link' => array(
                'title'             => __( 'Goods Category Setup', 'poslogic-credit' ),
                'desc_tip'             => __( 'Goods Category Setup', 'poslogic-credit' ),
                'type'              => 'link',
                'href'              => admin_url( 'admin.php?page=wc-settings&tab=checkout&section='.$this->plugin_section.'&screen=category_setup' ),
                'class'             => "add-new-h2",
            ),
            'test_mode' => array(
                'title' => __('Poslogic Test Mode', 'poslogic-credit'),
                'label' => __('Enable Test Mode', 'poslogic-credit'),
                'type' => 'checkbox',
                'description' => __('In this mode, requests for creating a loan application will go to the test environment.', 'poslogic-credit'),
                'default' => 'no',
            )
        );
    }

    public function generate_link_html( $key, $data ) {
        $field_key = $this->get_field_key( $key );
        $defaults  = array(
            'title'             => '',
            'disabled'          => false,
            'class'             => '',
            'css'               => '',
            'href'              => '',
            'placeholder'       => '',
            'type'              => 'link',
            'desc_tip'          => false,
            'description'       => '',
            'custom_attributes' => array(),
        );

        $data = wp_parse_args( $data, $defaults );

        ob_start();
        ?>
        <tr valign="top">
            <th scope="row" class="titledesc">
                <label for="<?php echo esc_attr( $field_key ); ?>"><?php echo wp_kses_post( $data['title'] ); ?> <?php echo $this->get_tooltip_html( $data ); // WPCS: XSS ok. ?></label>
            </th>
            <td class="forminp">
                <a id="<?php echo esc_attr( $field_key ); ?>" href="<?php echo esc_url($data['href']); ?>" class="<?php echo esc_attr($data['class']); ?>"><?php echo wp_kses_post( $data['title'] ); ?></a>
                <?php echo $this->get_description_html( $data ); ?>
            </td>
        </tr>


        <?php
        return ob_get_clean();
    }

    public function process_payment($order_id){
        global $woocommerce;
        $wc_cart = WC()->cart->get_cart();
        if(!count($wc_cart)){
            return array(
                'result' => 'error',
                'reason' => 'empty_cart',
            );
        }

        $token = $this->getPoslogicToken();

        $order_number = 0;
        $customer_order = null;
        if($order_id){
            $customer_order = new WC_Order($order_id);
            $order_number = $customer_order->get_order_number();
        }
        $redirect_url = site_url();
        $order_url = site_url();

        $i = 0;
        $goods = array();
        $wc_poslogic_categories = $this->getCategoryMapping();

        foreach ($wc_cart as $key => $cart_item) {
            $categories = get_the_terms($cart_item["data"]->id, 'product_cat');
            $poslogic_category = 1;
            foreach($categories as $category){
                $category_id = $category->term_id;

                if(isset($wc_poslogic_categories[$category_id]) && $wc_poslogic_categories[$category_id]){
                    $poslogic_category = $wc_poslogic_categories[$category_id];
                    break;
                }
            }

            if($this->manufacturer_field_name){
                $manufacturer = $cart_item['data']->get_attribute('pa_' . $this->manufacturer_field_name);
            }else{
                $manufacturer = site_url();
            }
            $goods[$i] = array(
                "external_id" => substr($key, 0, 16),
                "manufacturer" => $manufacturer,
                "model" => $cart_item['data']->get_title(),
                "price" => $cart_item['data']->get_price(),
                "count" => $cart_item['quantity'],
                "goods_category_id" => (int)$poslogic_category,
            );
            $i++;
        }

        $poslogic_order = $this->getPoslogicOrder($token, $goods, $order_number, $redirect_url, $order_url, (bool)$this->installment);

        if (isset($poslogic_order->errors)) {
            $result = var_export($poslogic_order->errors, true);
            wc_add_notice($result, 'error');
            if(isset($customer_order)){
                $customer_order->add_order_note('Error: ' . $result);
            }
        } else {
            $this->client_order_url = $poslogic_order->client_order_url;

            if(isset($customer_order)){
                $customer_order->add_order_note(__('Client started to filling a loan application', 'poslogic-credit'));
            }

            // Mark order as Paid
            //$customer_order->payment_complete();

            $woocommerce->cart->empty_cart();

            return array(
                'result' => 'success',
                'redirect' => $poslogic_order->client_order_url,
            );
        }

    }

    public function validate_fields(){
        return parent::validate_fields();
    }

    public function do_ssl_check(){
        if ($this->enabled == "yes") {
            if (get_option('woocommerce_force_ssl_checkout') == "no") {
                echo "<div class=\"error\"><p>" . sprintf(__("<strong>%s</strong> is enabled and WooCommerce is not forcing the SSL certificate on your checkout page. Please ensure that you have a valid SSL certificate and that you are <a href=\"%s\">forcing the checkout pages to be secured.</a>"), $this->method_title, admin_url('admin.php?page=wc-settings&tab=checkout')) . "</p></div>";
            }
        }
    }

    public function getPoslogicToken(){
        $auth_payload = array(
            "client_id" => $this->client_id,
            "client_secret" => $this->client_secret,
            "grant_type" => "client_credentials",
        );

        $response = wp_remote_post($this->getAuthUrl()."/token", array(
            'method' => 'POST',
            'body' => http_build_query($auth_payload),
            'timeout' => 90,
            'sslverify' => false,
        ));

        if (is_wp_error($response))
            throw new Exception(__('We are currently experiencing problems trying to connect to this payment gateway. Sorry for the inconvenience.', 'poslogic-credit'), 10000);

        if (empty($response['body']))
            throw new Exception(__('Poslogic Credits\'s Response was empty.', 'poslogic-credit'), 10001);

        $response_body = wp_remote_retrieve_body($response);

        $json_result = json_decode($response_body);
        if (isset($json_result->error)) {

            throw new Exception(__("Incorrect authorization data", 'poslogic-credit'), 10002);
        }

        $this->token = array(
            'access_token' => $json_result->access_token,
            'token_type' => $json_result->token_type,
            'expires_in' => $json_result->expires_in,
            'created_at' => $json_result->created_at,

        );
        return $this->token;
    }

    private function saveCategorySetup(){
        if(isset($_POST['categories']) && is_array($_POST['categories'])){
            $categories = $_POST['categories'];

            $time = new DateTime();
            $this->wpdb->query("TRUNCATE TABLE ".$this->table_name);
            foreach($categories as $wc_id => $poslogic_id){
                $wc_id = (int)$wc_id;
                $poslogic_id = (int) $poslogic_id;
                $this->wpdb->insert($this->table_name, array(
                    'time' => $time->format("Y-m-d H:i:s"),
                    'wp_product_category_id' => $wc_id,
                    'poslogic_product_category_id' => $poslogic_id,
                ));
            }
        }
    }

    private function getPoslogicOrder($token, $goods, $order_number, $redirect_url, $order_url, $is_installment){
        $post_fields = array(
            "order" => array(
                "number" => $order_number,
                "redirect_url" => $redirect_url,
                "order_url" => $order_url,
                "is_installment" => $is_installment,
                //"term" => 6
            ),
        );

        $post_fields["order"]["goods_attributes"] = $goods;

        $post_fields_string = http_build_query($post_fields);

        $response = wp_remote_post($this->getApiUrl()."/partner/orders", array(
            'method' => 'POST',
            'body' => $post_fields_string,
            'headers' => array(
                'Content-Type' => 'application/x-www-form-urlencoded',
                'Authorization' => 'Bearer ' . $token['access_token']
            ),
            'timeout' => 90,
            'sslverify' => false,
        ));

        if (is_wp_error($response))
            throw new Exception(__('We are currently experiencing problems trying to connect to this payment gateway. Sorry for the inconvenience.', 'poslogic-credit'), 10000);

        if (empty($response['body']))
            throw new Exception(__('Poslogic Credits\'s Response was empty.', 'poslogic-credit'), 10001);

        $response_body = wp_remote_retrieve_body($response);
        $json_result = json_decode($response_body);

        return $json_result;
    }

    private function getPoslogicCategories(){
        $token = $this->getPoslogicToken();

        $payload = array(
        );

        $response = wp_remote_post($this->getApiUrl()."/partner/goods_categories", array(
            'method' => 'GET',
            'body' => http_build_query($payload),
            'timeout' => 90,            'headers' => array(
                'Content-Type' => 'application/x-www-form-urlencoded',
                'Authorization' => 'Bearer ' . $token['access_token']
            ),

            'sslverify' => false,
        ));

        if (is_wp_error($response))
            throw new Exception(__('We are currently experiencing problems trying to connect to this payment gateway. Sorry for the inconvenience.', 'poslogic-credit'), 10000);

        if (empty($response['body']))
            throw new Exception(__('Poslogic Credits\'s Response was empty.', 'poslogic-credit'), 10001);

        $response_body = wp_remote_retrieve_body($response);

        $categories = json_decode($response_body);
        if (isset($json_result->error)) {
            throw new Exception(__("Incorrect authorization data", 'poslogic-credit'), 10002);
        }

        return $categories;
    }

    private function getAuthUrl(){
        $auth_url = ('yes' == $this->test_mode)
            ? self::DEMO_AUTH_URL
            : self::PROD_AUTH_URL;

        return $auth_url;
    }

    private function getApiUrl(){
        $api_url = ('yes' == $this->test_mode)
            ? self::DEMO_API_URL
            : self::PROD_API_URL;

        return $api_url;
    }

}